' Gambas class file

'' clase de manejo de datos entre fuentes de datos (data sources class module management)
'' 
'' esta clase, abstrae y engloba funciones de inicio y preparacin de fuentes de datos (bases de datos)
'' sus principales tareas son :
'' a) ofrecer una coneccion a la DB local (sqlite3) si no existe, la cra y inicia sus tablas
'' b) proveer de metodos de inicializacion (procesos sysasis_<tablas>) que crean sus estructuras de tablas
'' c) proveer funciones de registro de asistencia
'' d) permitir metodos de sincronizacion de los datos en nodos de origen si existen algunos
'' e) verificar y mantener la integridad del mo0dulo en todo momento
'' 
'' notese que la verificacion de integridad solo se realiza en los procesos de inicializacion
'' 

Private hconn As Connection     ' objeto de la coneccion de base de datos local (registros o enrolamientos)
Private pconn As Connection     ' objeto de la coneccion de base de datos remota (sincoronizacion o replicaicon)
Private hconndbnam As String    ' nombre de la base de datos local
Private hconnlugar As String = "999"    ' codigo de lugar de la maquina (donde se ejecuta este programa, identificacion)
Private hconniscon As Boolean   ' estado de el modulo, TRUE si la conecion esta viva y puede usarse
Private dbexistealdia As Boolean ' si la db existe no es necesario sincronizar
Private dbexisteantes As Boolean ' si la db es historica, limpiar registros anteriores

'' si el id es menor a 8 completa a 8, (por ahora asi, en el futuro, completar hasta un patron)
Public Sub fixidlen(id As String, Optional digitsid As Integer = 8, Optional removeAZ As Boolean = True) As String
    
    Dim fixcedula As String
    Dim numdigits As Integer
    Dim fixedcedu As String
    Dim charprime As String
    Dim charsegun As String
    
    charprime = Right(id)
    charsegun = Left(id)
    fixcedula = id
    If removeAZ == True Then
        If Comp(charprime, "A", gb.IgnoreCase) == 0 Or Comp(charprime, "Z", gb.IgnoreCase) == 0 Then
            fixedcedu = Left(fixcedula, -1)
            fixcedula = fixedcedu
        Endif
        If Comp(charsegun, "Z", gb.IgnoreCase) == 0 Or Comp(charsegun, "A", gb.IgnoreCase) == 0 Then
            fixedcedu = Right(fixcedula, -1)
            fixcedula = fixedcedu
        Endif
        numdigits = Len(fixcedula)
    Endif

        If numdigits == 13 Then ' VEN CI: inicio para corte de id minimo como 8 digitos, id de otros paises deberan usar el escaner con el generador de carnets
            id = fixedcedu
            fixcedula = Right(id, 10)
            numdigits = Len(fixcedula)
            While numdigits > digitsid
                fixedcedu = Right(fixcedula, -1)
                numdigits = Len(fixedcedu)
                fixcedula = fixedcedu
            Wend
            id = fixedcedu
        Endif                   ' VEN CI: fin codigo de corte para id minimo de 8 digitos
    
    numdigits = Len(id)
    fixedcedu = id
    While numdigits < digitsid
        fixedcedu = "0" & fixedcedu
        numdigits = Len(fixedcedu)
    Wend
    id = fixedcedu
    
    Return id
    
End

'' configuracin de codigo de lugar
Public Sub codigoLugar(Optional codger As String = Null) As String
    If codger == Null Then
        Return hconnlugar
    Else
        If Trim(codger) == "" Then
            hconnlugar = "999"
        Else
            hconnlugar = codger 
        Endif
        Return hconnlugar
    Endif
End

'' modulo configuracion, apertura y conexion a la db local emplear
Public Sub getConeccionDB() As Connection
    
    Dim dbnamebase As String = ".scanerguidb"
    Dim fechanterior As Integer
    Dim fechaactual As Integer
    Dim dbante As Boolean
    
    fechaactual = Val(Format$(Now, "yyyymmdd"))
    hconn = Null
    hconndbnam = dbnamebase & fechaactual & codigoLugar() & ".db"
    hconniscon = False
    
    hconn = New Connection  'Instanciamos conexion
    With hconn
        .Type = "sqlite3"
        .Host = User.Home   ' usando el home de quien corre la app para buscar alli la DB
        .Name = hconndbnam  ' decimos la db, si no existe dara error, y abajo la creamos/usamos anterior
    End With
    
    Try hconn.Open
    If Error Then
        
        Print "Error al conectar: \"" & Error.Code & " " & Error.Text & "\"; actualizando a una al dia...."
        dbexistealdia = False
        
        hconn.Close
        Wait 3                  ' dejamos espacio a la operacion I/O si se arranco a cambio de dia justico
        
        hconn.Type = "sqlite3"
        hconn.Host = User.Home   ' usando el home de quien corre la app para buscar alli la DB
        hconn.Name = ""          ' no decimos aun el nombre/archivo de la db, la creamos si no existe
        Wait 3
        hconn.Open
        Wait 3                  ' dejamos espacio a la operacion I/O si se arranco a cambio de dia justico
        
        fechanterior = fechaactual
        hconndbnam = dbnamebase & fechanterior & codigoLugar() & ".db"
        dbante = False
        While dbante == False
            fechanterior = fechanterior - 1
            Print "Intentando sincronizar la db, usando plantilla desde " & fechanterior
            If fechanterior < 20130101 Then
                dbante = True
                hconndbnam = dbnamebase & fechaactual & codigoLugar() & ".db"
                If Not hconn.Databases.Exist(hconndbnam) Then  'no existe la B.D. la creamos
                    hconn.Databases.Add(hconndbnam)
                    Wait 5              'elproceso de creacion tarda (operacion I/O) asi que esperamos ocurra
                    hconn.Close
                    hconn.Type = "sqlite3"
                    hconn.Host = User.Home   ' usando el home de quien corre la app para buscar alli la DB
                    hconn.Name = hconndbnam
                    Print "Sin historicos de base de datos, creando una nueva desde cero, e iniciandola"
                Else
                    Wait 5              'elproceso de creacion tarda (operacion I/O) asi que esperamos ocurra
                    hconn.Close
                    hconn.Type = "sqlite3"
                    hconn.Host = User.Home   ' usando el home de quien corre la app para buscar alli la DB
                    hconn.Name = hconndbnam
                    Print "Sin solucionar, la base de datos no estaba, usando posible corrupta"
                Endif
                dbexisteantes = False
            Else
                hconndbnam = dbnamebase & fechanterior & codigoLugar() & ".db"
                ' si existe DB anterior, usarla como base ya que tiene huellas dactilares
                If Exist(User.Home & "/" & hconndbnam) Then
                    Shell "cp " & User.Home & "/" & hconndbnam & " " & User.Home & "/" & dbnamebase & fechaactual & codigoLugar() & ".db"
                    hconndbnam = dbnamebase & fechaactual & codigoLugar() & ".db"
                    dbante = True
                Endif
                dbexistealdia = False
                dbexisteantes = True    ' la db es tomada de un dia anterior, borrar historicos pendiente
            Endif
        Wend
        
        If hconn.Opened Then
            hconn.Close
        Endif
        Wait 4
        hconn.Type = "sqlite3"
        hconn.Host = User.Home   ' usando el home de quien corre la app para buscar alli la DB
        hconn.Name = hconndbnam
        Try hconn.Open      ' en este punto, ya se configuro arriba el nombre y si existe o no.
        If Error Then
            Print "Error, la DB " & hconn.Name & " " & Error.Code & "" & Error.Text & ", no mas acciones para solucionar:\n" & Error.Code & " " & Error.Text
            hconn = Null
            Wait 5
            hconn.Close
            hconniscon = False
        Else
            hconniscon = True
        Endif
    Else
        hconniscon = True
        dbexistealdia = True    ' si conecta a la primera, la DB existe y ya esta sincronizada
        dbexisteantes = False   ' indicamos que la db es continuacion del dia, y no fue historica de huellas
    Endif
    
    If hconniscon Then
        Print "Conexion realizada, usando la DB " & hconn.Name & " sincronizada"
    Else
        Print "Conexion existente, pero la DB " & hconn.Name & " es invalida"
        Return Null
    Endif
    
    Return hconn
    
End

'' cierra coneccion alguna si aun esta abierta
Public Function closeConnection()

    If isConected() == True Then
        hconn.Close
        hconniscon = False
        Print "Conexion anulada, base de datos liberada"
    Endif

End

'' informa si la db ya existe, lo que significa que ya este sincronizada y con datos listos para usar, ya uqe getconnection y sincronizar la inician slo si es creada
Public Function itsDBaldia() As Boolean

    Return dbexistealdia

End

'' este, inicia estructura de datos para poder listar las huellas dactilares
Public Function sysasis_init_listado_id(Optional lugar As String = "tiendas")
    
    ' Create TABLE sysasis_listado_id(
    '   cod_ficha VARCHAR(20) Not Null, - - ficha / cedula / id del trabajador NOTA ESTE NO ES CI SINO numero, en VNZ es CI
    '   fec_registro Date Not Null, - - fecha del registro de dia de su huella dactilar, sin hora indica solo el dia
    '   cod_gerencia VARCHAR(20) Not Null, - - ubicacion(tienda)a la que pertenece, es CODGER por ejemplo
    '   hex_huelladactilar BLOB Not Null, - - huella dactilar tomada, es HEXFING
    '   hex_fotocara BLOB Not Null, - -foto de la cara es OPCIONAL y no necesario
    '   fec_actualizacion Date Null, - - fecha en que se altero los datos de esta tabla por ultima vez
    '   cod_usuasys VARCHAR(20)Null, - - codigo / usuario que altero los datos por ultima vez
    '   PRIMARY KEY(cod_ficha, fec_registro, cod_gerencia, hex_huelladactilar),
    
    ' Tabla de la ficha de registro de sysasis_listado_id
    
    Dim hTable As Table
    
    If isConected() == False Then
        getConeccionDB()
    Endif
    
    If hconniscon Then
        If Not hconn.Tables.Exist("sysasis_listado_id") Then
            hTable = hconn.Tables.Add("sysasis_listado_id")
            With hTable.Fields
                '.Add("id", db.Serial) ' para unicidad
                .Add("cod_ficha", db.String, 20)   ' FICHA/Cedu,  el id del trabajador NOTA ESTE NO ES CI, en VNZ es CI
                .Add("cod_lugar", db.String, 20, lugar)   ' nombre de ubicacion(tienda o sobrenombre) en al que labora/trabaja o se enrolo
                .Add("fec_registro", db.String,, Val(Format$(Now, "mmddhh")))   ' fecha del registro de dia de su huella dactilar, sin hora indica solo el dia
                .Add("cod_gerencia", db.String, 20)   ' ubicacion(tienda)a la que pertenece, es CODGER por ejemplo
                .Add("hex_huelladactilar", db.Blob,, Null)  ' huella dactilar del usuario/trabajado ficha, es HEXFING
                .Add("hex_fotocara", db.Blob,, Null)  ' fot de la cara del usuario/trabajado ficha, OPCIONAL
                .Add("fec_actualizacion", db.Date,, Now)   ' fecha del registro de dia de su huella dactilar
                .Add("cod_usuasys", db.String, 20)   ' ficha / cedula / id del trabajador NOTA ESTE NO ES CI, en VNZ es CI
            End With
            hTable.PrimaryKey = ["cod_ficha", "fec_registro", "cod_gerencia"] ' no es necesario , es solo lectura
            hTable.Update
        Endif
    Else
        Message.Error(" error " & Error.Code & " " & Error.Text)
    Endif
    closeConnection
    
End

'' proceso de inicializacion de DB, tabla de enrolamiento, si no existe en la DB una tabla de enrolamiento, se crea.
'' este, inicia estructura de datos para poder enrolar nuevas huellas dactilares
Public Function sysasis_init_enrolar_id(Optional lugar As String = "tiendas")
    
    ' Create TABLE sysasis_enrolar_id(
    '   cod_ficha VARCHAR(20) Not Null, - - FICHA/Cedu, el id del trabajador NOTA ESTE NO ES CI, en VNZ es CI
    '   cod_lugar VARCHAR(20) Not Null, - - nombre de ubicacion(tienda o sobrenombre) en la que labora
    '   fec_registro Date Not Null, - - fecha del registro de dia de su huella dactilar, sin hora indica solo el dia
    '   cod_gerencia VARCHAR(20) Not Null, - - ubicacion(tienda)a la que pertenece, es CODGER por ejemplo
    '   hex_huelladactilar BLOB Not Null, - - huella dactilar tomada es HEXFING
    '   hex_fotocara BLOB Not Null, - -foto de la cara es OPCIONAL y no necesario
    '   fec_actualizacion Date Null, - - fecha en que se altero los datos de esta tabla por ultima vez
    '   cod_usuasys VARCHAR(20)Null, - - codigo / usuario que altero los datos por ultima vez
    '   PRIMARY KEY(cod_ficha, fec_registro, cod_gerencia, hex_huelladactilar),
    
    ' Tabla de la ficha de registro de sysasis_enrolar_id
    
    Dim hTable As Table
    
    If isConected() == False Then
        getConeccionDB()
    Endif
    
    If Not hconn.Tables.Exist("sysasis_enrolar_id") Then
        hTable = hconn.Tables.Add("sysasis_enrolar_id")
        With hTable.Fields
            .Add("cod_ficha", db.String, 20)   ' FICHA/Cedu, el id del trabajador en VNZ es numero de la CI
            .Add("cod_lugar", db.String, 20, lugar)   ' nombre de ubicacion(tienda o sobrenombre) en al que labora/trabaja o se enrolo
            .Add("fec_registro", db.Date,, Val(Format$(Now, "mmddhh")))   ' fecha del registro de dia de su huella dactilar, sin hora, indica solo el dia
            .Add("cod_gerencia", db.String, 20)   ' ubicacion(tienda)a la que pertenece, es CODGER por ejemplo
            .Add("hex_huelladactilar", db.Blob,, Null)  ' huella dactilar del usuario/trabajado ficha, HEXFING
            .Add("hex_fotocara", db.Blob,, Null)  ' foto de la cara del usuario/trabajado ficha, OPCIONAL
            .Add("fec_actualizacion", db.Date,, Now)   ' fecha del registro de dia de su huella dactilar
            .Add("cod_usuasys", db.String, 20)   ' ficha / cedula / id del trabajador NOTA ESTE NO ES CI, en VNZ es CI
        End With
        hTable.PrimaryKey = ["cod_ficha", "cod_lugar", "cod_gerencia", "fec_registro"]
        hTable.Update
    Endif
    closeConnection
    
End

'' inicializacion de registros en la DB, si no existe en DB la tabla de registros la crea
Public Function sysasis_init_registro(Optional lugar As String = "tiendas")
    
    ' - - tabla de registros del horario de trabajo, es usada para enviar a OP y registrar los horarios laborados
    ' Create TABLE sysasis_registro(
    '   cod_ficha VARCHAR(20) Not Null, - - ficha / cedula / id del trabajador NOTA ESTE NO ES CI, en VNZ es CI
    '   cod_lugar VARCHAR(20) Not Null, - - nombre de ubicacion(tienda o sobrenombre) en la que labora
    '   fec_registro Date Not Null, - - fecha del registro de dia a laborar sin hora, indica solo el dia
    '   cod_gerencia VARCHAR(20) Not Null, - - ubicacion(tienda)a la que pertenece
    '   num_contador INTEGER Not Null Default 0, - - contador de fotos, si va a distintos lugares debe marcar salida
    '   horaentrada INTEGER Null, - - hora de entrada del dia
    '   minuentrada INTEGER Null, - - minuto de entrada en dicha hora
    '   horadescanso INTEGER Null, - - hora de descanso del dia
    '   minudescanso INTEGER Null, - - minuto de descanso en dicha respectiva hora
    '   horareincor INTEGER Null, - - hora que se reincorpora del descanso
    '   minureincor INTEGER Null, - - minuto de reincorporacion de dicha hora
    '   horasalida INTEGER Null, - - hora de salida del dia laborado
    '   minusalida INTEGER Null, - - minuto de salida de dich hora
    '   hex_huelladactilar BLOB Not Null, - - opcional, huella dactilar del usuario/trabajado ficha, opcional, es HEXFING
    '   hex_fotocara BLOB Not Null, - - opcional, foto de la cara es OPCIONAL y no necesario
    '   fec_actualizacion Date Null, - - fecha en que se altero los datos de esta tabla por ultima vez NOTA FUNCIONA CON DEFAULT NOW
    '   cod_usuasys VARCHAR(20)Null, - - codigo / usuario que altero los datos por ultima vez
    '   PRIMARY KEY(cod_ficha, fec_registro, cod_gerencia),
    '   - - si el personal es muy movido, tendra registros en distintas ubicaciones,
    '   - - el ubicacion ayuda a descartar duplicados.esto amerita tener un SP que maneje los datos
    '   - - la expotacio se realizara en un vista que colocara el calculo de las horas y
    '   - - estos registros "dispersos"(ejemplo, entro en castellana, su primera salida debe ser de castellana antes de ir a otro lado)
    '   - - diferencia entre registro no puede ser menor a 1 / 3 hora y mayor a 6 horas CUANDO SEAN SELLOS DISTINTOS
    
    ' Poruqe dos columnas de fecha? : porque la segunda es por defecto la fecha y hora actual, si alguien manipula, se registra
    ' lo que significa que si alguien inserta alguna hora de trabajo a mano, se vera la trampa si no ejecuta completo el query
    
    Dim hTable As Table, dummyquer As String
    
    If isConected() == False Then
        getConeccionDB()
    Endif
    
    If Not hconn.Tables.Exist("sysasis_registro") Then
        hTable = hconn.Tables.Add("sysasis_registro")
        With hTable.Fields
            .Add("cod_ficha", db.String, 20)   ' ficha / cedula / id del trabajador NOTA ESTE NO ES CI, en VNZ es CI
            .Add("cod_lugar", db.String, 20, lugar)   ' nombre de ubicacion(tienda o sobrenombre) en al que labora/trabaja o se enrolo
            .Add("fec_registro", db.String,, Val(Format$(Now, "mmddhh")))   ' fecha del registro de dia de su huella dactilar
            .Add("cod_gerencia", db.String, 20)   ' ubicacion(tienda)a la que pertenece es CODGER por ejemplo
            .Add("num_contador", db.Integer,, 0)      ' contador de fotos, si va a distintos lugares debe marcar salida = 4
            .Add("horaentrada", db.Integer,, 0)      '
            .Add("minuentrada", db.Integer,, 0)      '
            .Add("horadescanso", db.Integer,, 0)      '
            .Add("minudescanso", db.Integer,, 0)      '
            .Add("horareincor", db.Integer,, 0)      '
            .Add("minureincor", db.Integer,, 0)      '
            .Add("horasalida", db.Integer,, 0)      '
            .Add("minusalida", db.Integer,, 0)      '
            .Add("hex_huelladactilar", db.Blob,, Null)  ' opcional, huella dactilar del usuario/trabajado ficha, opcional, es HEXFING
            .Add("hex_fotocara", db.Blob,, Null)  ' foto de la cara del usuario/trabajado ficha, OPCIONAL
            .Add("fec_actualizacion", db.Date,, Now)   ' fecha del registro de dia de su huella dactilar
            .Add("cod_usuasys", db.String, 20)   ' ficha / cedula / id del trabajador NOTA ESTE NO ES CI, en VNZ es CI
        End With
        hTable.PrimaryKey = ["cod_ficha", "cod_lugar", "cod_gerencia", "fec_registro"]
        hTable.Update
    Else
        dummyquer = "DELETE FROM sysasis_registro WHERE fec_registro NOT LIKE '" & Format$(Now, "yyyy-mm-dd") & "%' "
        hconn.Begin
        Print "Borrando registros previos no validos al dia... " & dummyquer
        hconn.Exec(dummyquer)
        hconn.Commit
    Endif
    closeConnection
    
End

'' inicio de tabla de registros de actividad, puede que exista gente con huellas dactilares piches
Public Function sysasis_init_marcajes(Optional lugar As String = "tiendas")
    
    ' - - tabla de registros del horario de trabajo, es usada para enviar a OP y registrar los horarios laborados
    ' Create TABLE sysasis_init_marcajes(
    '   cod_ficha VARCHAR(20) Not Null, - - ficha / cedula / id del trabajador NOTA ESTE NO ES CI, en VNZ es CI
    '   fec_registro Date Not Null, - - fecha del registro que se esta ingresando
    '   cod_gerencia VARCHAR(20) Not Null, - - ubicacion(tienda)a la que pertenece
    '   hora INTEGER Null, - - hora de marcaje fallida
    '   minu INTEGER Null, - - minuto de marcaje fallida
    '   segu INTEGER Null, - - segundo de marcaje fallida
    '   fec_actualizacion Date Null, - - fecha en que se altero los datos de esta tabla por ultima vez NOTA FUNCIONA CON DEFAULT NOW
    '   cod_usuasys VARCHAR(20)Null, - - codigo / usuario que altero los datos por ultima vez
    '   PRIMARY KEY(cod_ficha, fec_registro, cod_gerencia),
    '   - - si el personal es muy movido, tendra registros en distintas ubicaciones,
    '   - - el ubicacion ayuda a descartar duplicados.esto amerita tener un SP que maneje los datos
    '   - - la expotacio se realizara en un vista que colocara el calculo de las horas y
    '   - - estos registros "dispersos"(ejemplo, entro en castellana, su primera salida debe ser de castellana antes de ir a otro lado)
    '   - - diferencia entre registro no puede ser menor a 1 / 3 hora y mayor a 6 horas CUANDO SEAN SELLOS DISTINTOS
    
    ' Poruqe dos columnas de fecha? : porque la segunda es por defecto la fecha y hora actual, si alguien manipula, se registra
    ' lo que significa que si alguien inserta alguna hora de trabajo a mano, se vera la trampa si no ejecuta completo el query
    
    Dim hTable As Table
    
    If isConected() == False Then
        getConeccionDB()
    Endif
    
    If Not hconn.Tables.Exist("sysasis_marcajes") Then
        hTable = hconn.Tables.Add("sysasis_marcajes")
        With hTable.Fields
            .Add("cod_ficha", db.String, 20)   ' ficha / cedula / id del trabajador NOTA ESTE NO ES CI, en VNZ es CI
            .Add("cod_lugar", db.String, 20, lugar)   ' nombre de ubicacion(tienda o sobrenombre) en al que labora/trabaja o se enrolo
            .Add("fec_registro", db.String,, Val(Format$(Now, "mmddhh")))   ' fecha del registro de dia de su huella dactilar
            .Add("cod_gerencia", db.String, 20)   ' ubicacion(tienda)a la que pertenece es CODGER por ejemplo
            .Add("num_contador", db.Integer,, 0)      ' contador de fotos, si va a distintos lugares debe marcar salida = 4
            .Add("hora", db.Integer,, 0)      '
            .Add("minu", db.Integer,, 0)      '
            .Add("segu", db.Integer,, 0)      '
            .Add("hex_huelladactilar", db.Blob,, Null)  ' opcional, huella dactilar del usuario/trabajado ficha, opcional, es HEXFING
            .Add("hex_fotocara", db.Blob,, Null)  ' foto de la cara del usuario/trabajado ficha, OPCIONAL
            .Add("fec_actualizacion", db.Date,, Now)   ' fecha del registro de dia de su huella dactilar
            .Add("cod_usuasys", db.String, 20)   ' ficha / cedula / id del trabajador NOTA ESTE NO ES CI, en VNZ es CI
        End With
        hTable.PrimaryKey = ["cod_ficha", "cod_gerencia", "fec_registro"]
        hTable.Update
    Endif
    closeConnection
    
End

'' proceso de sincronizado off-line para cuadno no hay internet
'' este proceso, inicia la tabla de lista de trabajadores/usuarios, y la pobla desde un archivo CSV o desde un regiastro por defecto
'' este proceso obtiene la lista de empleados/usuarios a autenticar, completa (fuerza bruta)
'' retrae el fichero compreso/encriptado, detecta nombres de campos e inserta los registros
'' una vez realizado esto borra el fichero desencriptado, los archivos son movidos por fecha
'' la fecha es el numero, no importando la de la maquina, la ultima fecha sera siempre el numero mayor
Public Sub syncronizar(arcm As Boolean, Optional lugar As String = "tienda", Optional nf As String = "consolidadotemp_export_", sincronizar As Boolean = True) As Integer
    
    Dim namFile As String       ' nombre del archivo CVS que trae la lista actualizada sin comprimir
    Dim namComp As New Uncompress   ' nombre del archivo comprimido que trae la lista en plano
    Dim hFile As File           ' abstrancion objeto del archivo CSV que se leera con los datos
    Dim hTable As Table         ' tabla de la nomina listado desde esas lineas de procesamiento
    Dim wtable As Result        ' virtualizacion en tabla del archivo CSV antes de meter en la tabla de BD
    Dim wline As String         ' linea en curso al procesamiento del CSV cuando este leyendose
    Dim wdata As String[]       ' linea procesada (columnas) del CSV
    Dim numDate As Integer      ' numero formado por YYYYMMDD este se ira reduciendo hasta encontrar un archivo
    Dim extFile As String       ' extension del archivo dependiendo si esta compreso
    Dim sourcepath As String    ' ruta del archivo, por defecto home y /tmp si primera vez
    Dim sepa As String          ' separador de campos por defecto ";", puede que sea "," o ";"
    
    Dim tipnom As Integer, codsuc As Integer, codger As Integer, ficha As Integer
    Dim nombres As Integer, apellidos As Integer, estado As Integer, cedula As Integer, cedu As Integer
    Dim hexfing As Integer, fingreso As Integer
    
    Dim dtipnom As String, dcodsuc As String, dcodger As String, dficha As String
    Dim dnombres As String, dapellidos As String, destado As String, dcedula As String, dcedu As String
    Dim dhexfing As String, dfingreso As String
    
    Dim fileexits As Boolean = False
    Dim archivocsv As Boolean = False
    Dim dummycont As Integer, dumtacont As Integer  ' cantidades csv/tabla
    Dim icols As Integer, iline As Integer    ' usados para manejar las lineas y los titulos de nombre de campos
    Dim dummyword As String     ' usado para ir analizando cada celada del archivo csv, si tiene " o si necesita escaparse
    Dim dummyquer As String     ' usado para efectuar querys mediante construccion de consulta dinamica segun parametros
    Dim hexfindata As Variant   ' data blob de hexfin despeus de reconvertir desde base64 que este en el archivo
    
    tipnom = 1          ' columna para lugar/entidad a la que compete dar respuesta
    codsuc = 2          ' columna de info de relacionada a la anterior, nunca viene vacio, por ello de segunda
    codger = 3          ' columna del departamento/ingerencia a que trabaja, nunca viene vacio por ello necesario
    ficha = 4           ' ficha, puede colarse una ficha con una "X" y sin un "cero" delante por mala conversion del CSV
    estado = 5          ' este es el principal filtro, solo los Activos estan en trabajo diario, el resto no deberia laborar
    cedula = 6          ' cedula, este campo trae letras, por ello no debe ser de los primeros, y puede estar duplicado
    cedu = 7            ' campo solo numeros, necesario ya que asi no completo con cero a izquierda
    fingreso = 8        ' este campo permite obtener el ultimo codigo codger fuera de los duplicados
    hexfing = 10        ' data variable grande de la huella dactilar, necesario
    nombres = 11        ' nombres ambos del trabajador, trae una coma por ende cuidado con el CSV, deberia estar de penultimo
    apellidos = 12      ' apellidos ambos del trabajador, trae una coma por ende cuidado con el CSV, deberia estar de ultimo
    
    If isConected() == False Then
        getConeccionDB()            ' preparacion de la coneccion de base de datos, si no hay necesitamos una
    Endif
    
    If Not hconn.Tables.Exist("ConsolidadoTemp") Then
        hTable = hconn.Tables.Add("ConsolidadoTemp")
        With hTable.Fields
            .Add("TIPNOM", db.String, 60, "999") ' TIPONOM VARCHAR(60) Default Null, - - PK: nunca hay dos trabajadores en la misma nomina
            .Add("CODSUC", db.String, 60, "999") ' CODSUC VARCHAR(60) Default Null, - - brinda info del lugar de trabajo
            .Add("CODGER", db.String, 60, "999") ' CODGER VARCHAR(60) Default Null, - - brinda info del lugar donde debe trabajar
            .Add("FICHA", db.String, 60, "99999999") ' FICHA VARCHAR(10)Null Default Null, - - identificador o licencia conducir, cedula sin letra de nacionalidad en caso Venezuela
            .Add("NOMBRES", db.String, 60, Null) ' NOMBRES VARCHAR(60)Null Default Null, - - nombre, ambos separados por un espacio
            .Add("APELLIDOS", db.String, 60, Null) ' APELLIDOS VARCHAR(60)Null Default Null, - - apellido, ambos separados por un espacio
            .Add("ESTADO", db.String, 60, Null) ' ESTADO VARCHAR(60)Null Default Null, - - activo, inactivo, suspendido, vacaciones, usado para verificacion y auditoria
            .Add("Cedula", db.String, 60, "99999999") ' Cedu VARCHAR(12)Null Default Null, - - numero de la cedula necesario sin ceros a la izquierda
            .Add("HEXFING", db.Blob,, Null) ' HEXFING64 -- la huella dactilar, viene base64 codificado y debe convertirse antes de colocarse
            .Add("fingreso", db.String, 60, Null) ' fingreso VARCHAR(60) Defaul Null - - fecha de ingreso a su respectivo codger, para saber su ultima ubicacion
            .Add("fec_actualizacion", db.String, 60, Now) ' fec_actualizacion Date Not Null, - - fecha en que se altero los datos de esta tabla por ultima vez
            .Add("cod_usuario", db.String, 60, "systemas") ' cod_usuario VARCHAR(20)Null Default 'systemas' , -- codigo/usuario que altero los datos por ultima vez
        End With
        hTable.PrimaryKey = ["TIPNOM", "CODSUC", "CODGER", "FICHA", "Cedula"] ' cedula no es pk, debe ser cedu
        hTable.Update
    Endif
    
    If arcm Then
        extFile = ".cryte"          ' si arcm es True, se indica que el archivo vino compreso
    Else
        extFile = ".csv"            ' sino es un archivo de texto plano separado por punto y coma
    Endif
    
    ' inicializacion de la lista matutina, esta lista solo se debe actualizar si hay registros nuevos (cant enrolados <> cant trabj)
    numDate = Val(Format$(Now, "yyyymmdd"))
    sourcepath = User.Home
    namFile = sourcepath &/ nf & numDate & extFile
    Print "Intentando actualizado de datos de nomina .. como " & namFile
    
    ' verificacion de si hay actualizacion de la lista de empleados, sino no procedo a usar alguno antiguo
    If Not Exist(namFile) Then
        fileexits = False
        While fileexits == False
            numDate = numDate - 1
            namFile = sourcepath &/ nf & numDate & extFile
            If Exist(namFile) Then
                Print "Encontrado archivo viejo " & namFile
                fileexits = True
            Endif
            If numDate < 20130922 Then
                ' si ni hay base de datos ni archivo, no hay nada que hacer
                If Not Exist(namFile) Then
                    Print "No se encontro datos de sincronizacion al dia, no se actualizan datos. \n"
                    "Debe existir un archivo similar a " & namFile & " como minimo."
                Endif
                'Goto RellenarListado   ' TODO quitar si no esta listo sincronizacion
                fileexits = False
                Break               ' rompo el ciclo, nunca encontrare el archivo
            Endif
        Wend
    Else
        fileexits = True ' si el archivo existe a la primera la lista esta al dia
    Endif
    
    If fileexits Then
        Print "verificando tipo de formato del archivo ... "
        If arcm Then
            extFile = ".cvs"
            namComp.Type = "bzlib2"
            Try namComp.File(namFile, sourcepath &/ nf & numDate & extFile)
            If Error Then
                Message.Warning("Error al descifrar el archivo " & namFile & ": corrupto o invalido.")
                archivocsv = False
            Endif
            namFile = sourcepath &/ nf & numDate & extFile
        Endif
        Print "verificando cantidad de registros en el archivo ... "
        If archivocsv Then
            hFile = Open namFile For Read
            dummycont = 0
            While Not Eof(hFile)
                Line Input #hFile, wline
                If RInStr(wline, "FICHA") > 0 Or RInStr(wline, "ficha", 0, 1) > 0 Then
                    dummycont = 0       ' FICHA es uno de los posibles tutilos/cabecera, si viene no contarlo
                Else
                    dummycont += 1      ' la misma cantidad de lineas de csv es la misma cantidad de registros
                Endif
            Wend
            hFile.Close
        Endif
    Endif
    
    If hconn.Tables.Exist("ConsolidadoTemp") Then
        dummyquer = "Select count( ficha ) as lineas From ConsolidadoTemp "
        wtable = Null           ' si existe la tabla, verificamos cantidad de registros
        wtable = hconn.Exec(dummyquer)
        dumtacont = wtable!lineas
    Endif

    'si la DB esta al dia que corre, no se realiza actualizacion alguna, innecesario
    If itsDBaldia() == False Then
        Print "Base de datos iniciada por vez primera hoy dia, informacion de sincronismo: " & dumtacont & ":" & dummycont & "."
    If fileexits Then
        ' procesamiento del archivo CSV, en un futuro este deberia solo enviar los cambiios
        hFile = Open namFile For Read
        ' primero leemos solo la primera linea, para determinar si hay nombres de columnas
        dummycont = 0
        Seek #hFile, dummycont
        Line Input #hFile, wline
        If InStr(wline, ",") > 1 Then
            sepa = ","
        Else
            sepa = ";"
        Endif
        wdata = Split(wline, sepa, "\\", False)
        ' recorro para ver si hay cabeceras, sino se usan las por defecto
        For icols = 0 To wdata.Max
            ' tomo la celda actual en icols, ademas celdalimpia analiza si la celda contiene comillas simples/dobles
            dummyword = celdalimpia(wdata[icols])
            ' empiezo comparar la linea primera por nombres de columnas, si no igual no hacer else, sino mete erroneo
            If Comp(dummyword, "TIPNOM", 1) = 0 Then
                tipnom = icols
            Endif
            If Comp(dummyword, "CODSUC", 1) = 0 Then
                codsuc = icols
            Endif
            If Comp(dummyword, "CODGER", 1) = 0 Then
                codger = icols
            Endif
            If Comp(dummyword, "FICHA", gb.IgnoreCase) == 0 Then
                ficha = icols
            Endif
            If Comp(dummyword, "NOMBRES", gb.IgnoreCase) = 0 Then
                nombres = icols
            Endif
            If Comp(dummyword, "APELLIDOS", gb.IgnoreCase) = 0 Then
                apellidos = icols
            Endif
            If Comp(dummyword, "ESTADO", gb.IgnoreCase) = 0 Then
                estado = icols
            Endif
            If Comp(dummyword, "Cedula", gb.IgnoreCase) = 0 Then    ' cedula con letra de pais y numero completado, solo Venezuela
                cedula = icols
            Endif
            If Comp(dummyword, "Cedu", gb.IgnoreCase) == 0 Then     ' cedula solo numeros sin cero a izquierda, necesario
                cedu = icols
            Endif
            If Comp(dummyword, "fingreso", gb.IgnoreCase) == 0 Then
                fingreso = icols
            Endif
            If Comp(dummyword, "HEXFING64", 1) == 0 Then
                hexfing = icols
            Endif
        Next
        dummycont = dummycont + 1
        ' leyendo la primera columna ya se hizo, ahora leemos el resto
        ' TODO 1) hacer query de si existe, 2) si existe hacer update, sino create, 3) consolidar
        hconn.Begin
        While Not Eof(hFile)
            Line Input #hFile, wline
            ' todas las celdas deben tener datos, sino esto falla
            wdata = Split(wline, sepa, "\\", False)
            'hexceldalimpia(wdata[HEXFING64])
            'Print "procesando archivo linea " & dummycont & ": " & wdata[TIPNOM] & "," & wdata[CODSUC] & "," & wdata[CODGER] & "," & wdata[FICHA] & "," & wdata[Cedula] & "," & wdata[Cedu] & "," & wdata[NOMBRES]
            wtable = hconn.Create("ConsolidadoTemp")
            wtable["TIPNOM"] = celdalimpia(wdata[tipnom]) ' TIPNOM VARCHAR(60) Default Null, - - PK necesaria, dado no hay un trab en varias nominas
            wtable["CODSUC"] = celdalimpia(wdata[codsuc]) ' CODSUC VARCHAR(60) Default Null, - - brinda info del lugar de trabajo
            wtable["CODGER"] = celdalimpia(wdata[codger]) ' CODGER VARCHAR(60) Default Null, - - brinda info del lugar donde debe trabajar
            wtable["FICHA"] = celdalimpia(wdata[ficha]) ' FICHA VARCHAR(10)Null Default Null, - - identificador o licencia conducir, cedula sin letra de nacionalidad en caso Venezuela
            wtable["NOMBRES"] = celdalimpia(wdata[nombres]) ' NOMBRES VARCHAR(60)Null Default Null, - - nombre, ambos separados por un espacio
            wtable["APELLIDOS"] = celdalimpia(wdata[apellidos]) ' APELLIDOS VARCHAR(60)Null Default Null, - - apellido, ambos separados por un espacio
            wtable["ESTADO"] = celdalimpia(wdata[estado]) ' ESTADO VARCHAR(60)Null Default Null, - - activo, inactivo, suspendido, vacaciones, usado para verificacion y auditoria
            wtable["fingreso"] = celdalimpia(wdata[fingreso]) ' fingreso VARCHAR(60) Defaul Null - - fecha de ingreso a su respectivo codger, para saber su ultima ubicacion
            wtable["Cedula"] = celdalimpia(wdata[cedu]) ' Cedu VARCHAR(12)Null Default Null, - - numero unico del trabajador, en venezuela la cedula
            'wtable["HEXFING64"] =  ' HEXFING64 -- la huella dactilar, viene base64 codificado y debe convertirse antes de colocarse
            wtable.Update
            dummycont = dummycont + 1
        Wend
        Print "Procesados " & dummycont & " registros, listado completado, procediendo sincronizar datos existentes si alguno.."
        hFile.Close
        hconn.Commit
        FMain.datos.setDbLocalLista(True) ' comunico a main que ya no tiene que invocarme mas nunca
        Try Kill namFile
    Endif
    Else
        Print "Base de datos ya iniciada hoy dia, no necesario sincronismos, certificando tablas..."
    Endif
    
RellenarListado:
    
    sysasis_init_listado_id(lugar)     ' inicio la tabla de listado filtrado
    sysasis_init_enrolar_id(lugar)     ' inicio la tabla de enrolado nuevo
    sysasis_init_registro(lugar)       ' inicio la tabla de registros del dia
    
    ' If sincronizar == True Then
    '     'If dbexisteantes == False Then
    '     dummyquer = "INSERT" 
    '     dummyquer = dummyquer & " INTO sysasis_listado_id(cod_ficha, cod_lugar, fec_registro, cod_gerencia, hex_huelladactilar)" 
    '     dummyquer = dummyquer & " Select ficha, codger, fec_actualizacion, codsuc, HEXFING From ConsolidadoTemp "
    '     dummyquer = dummyquer & "WHERE ConsolidadoTemp.ESTADO Like '_ctivo'"
    '     
    '     ' pasar la data con los dedos a la tabla de listado para no usar los datos basura si existiera alguno
    '     hconn.Begin
    '     hconn.Exec("DELETE FROM sysasis_listado_id ")
    '     hconn.Commit
    '     hconn.Begin
    '     hconn.Exec(dummyquer)
    '     hconn.Commit
    '     ' TODO si modo directo activado, no borar datos de tabla de enrolado, sino insertarlos en el listado
    '     'sys_enroll_user("999999999", True, Null, Null, Null, "Nombre", "Apellido")
    '     ' TODO OJO si desactivado modo directo listar y borrar dichos ingresados que aun esten en esta tabla
    ' Endif
    closeConnection
    Print "Base de datos sincronizada y preparada, lista para usar."
    Return 0
    
End

'' celdalimpia remueve la comillas simples/dobles de una variable texto
Private Sub celdalimpia(celda As String, Optional delimitador As String = "\"") As String

    If Left$(celda) == "\'" And Right$(celda) == "\'" Then
        celda = Mid$(celda, 2, -1)
    Endif
    ' analizo si la celda contiene comillas dobles
    If Left$(celda) == delimitador And Right$(celda) == delimitador Then
        celda = Mid$(celda, 2, -1)
    Endif
    Return celda

End

'' procedimiento de reclutamiento de nuevos esclav.. errr nuevos trabjadores a la lista
'' requiere el id (ficha/cedula/identificador) del usuario o trabajador, 
'' opcionalmente se le pasa la data del dedo, en ultimo caso las fotos de la cara y el dedo que no son importantes si la primera esta
Public Sub sys_enroll_user(id As String, Optional direct_enroll As Boolean = False, Optional ruta_data As String = "", data As Variant = Null, imag_cara As String = Null, imag_dedo As Picture = Null, nameid As String, apelid As String) As Integer
    
    Dim wtable As Result        ' virtualizacion en tabal del archivo CSV antes de meter en la tabal de BD
    Dim dummyquer As String     ' query para ingresar el usuario en la lista de enrolado
    Dim hres As Result          ' abstraccion de resultados desde DB despeus de ejecutar query
    Dim codubi As String        ' codigo de la ubicacion, deberia tomarse de la aplicacion pero bueh
    Dim vartempo As Integer     ' usada para saber en cada query si vino resultado alguno
    Dim coderro As Integer = 1  ' codigo error de la operacion, cero si nada falla, y 1 hay errores
    Dim datos As New String[2]   ' data del usuario para mostrar informativo en pantalla, asi no mete la pata el esclav.. err trabajador
    
    Dim fixcedula As String
    Dim numdigits As Integer
    Dim fixedcedu As String
    
    ' el id varia en digitos o formato, para el disparador, remover A/Z y autocompletar
    fixedcedu = fixidlen(id)
    id = fixedcedu
    
    ' preparacion de la coneccion de base de datos
    If isConected() == False Then
        getConeccionDB()
    Endif
    
    ' se esta registrando la huella de unDFi nuevo usuario, verificamos no lo hayan enrolado antes
    dummyquer = "SELECT count(cod_ficha) as existe FROM sysasis_enrolar_id WHERE cod_ficha LIKE '" & id & "'"
    Try hres = hconn.Exec(dummyquer)
    If Error Then
        coderro = 2
    Else
        vartempo = hres!existe
        Print "Encontrados " & vartempo & " usuarios similares.. procediendo a manejarlo.."
        If vartempo >= 1 Then
            hconn.Begin
            dummyquer = "DELETE FROM sysasis_enrolar_id WHERE cod_ficha LIKE '" & id & "%'"
            hres = hconn.Exec(dummyquer)
            Try hconn.Commit
            If Error Then
                coderro = 2
                hconn.Rollback
            Endif
        Endif
    Endif
    
    If coderro == 2 Then
        Print " Error registrando el id: " & Error.Text & " " & Error.Code & " consulte con el departamento de nomina, y en ultimo sistemas."
        Message.Warning(" Error registrando el id: " & Error.Text & " " & Error.Code & "\nPor favor vuelva a intentarlo, si persiste dicho error entonces\nconsulte con el departamento de nomina, a traves de la mensageria.")
        Return coderro
    Endif
    
    codubi = "998"
    ' intentamos ver si podemos tomar el codigo ubicacion de la nomina (si el usuario ha estado antes o se retoma su huella)
    dummyquer = "SELECT CODGER, fingreso, MAX(date(fingreso)) as num FROM ConsolidadoTemp WHERE ficha LIKE '" & id & "'"
    Try hres = hconn.Exec(dummyquer)
    If Error Then
        Print " Error verificando ubicacion del id: " & Error.Text & " " & Error.Code & " usando uno por defecto 998 "
        Return coderro
    Endif
    ' vartempo = hres.count 'ojo: un select bien ejecutado no da eeror, y del select anterior ya vino codger
    If vartempo >= 1 Then
        codubi = hres!CODGER ' por ende si la ficha existia, vartempo ya era 1 y traera codger
        If Comp(Trim(codubi), "", 1) == 0 Then
            codubi = "998"
        Endif
    Endif
    
    datos[0] = "NO ENCONTRADO"
    datos[1] = ""
    ' se enrola el usuario con el dedo, laimagen es opcional
    hconn.Begin
    wtable = hconn.Create("sysasis_enrolar_id")
    wtable!cod_ficha = id ' TIPNOM VARCHAR(60) Default Null, - - PK necesaria, dado no hay un trab en varias nominas"
    wtable!fec_registro = Date(Now) ' CODSUC VARCHAR(60) Default Null, - - brinda info del lugar de trabajo"
    wtable!cod_gerencia = codubi ' CODGER VARCHAR(60) Default Null, - - brinda info del lugar donde debe trabajar"
    If Comp(ruta_data, "", gb.IgnoreCase) == 0 Then
        wtable!hex_huelladactilar = data ' HEXFING64 -- la huella dactilar, viene base64 codificado y debe convertirse antes de colocarse"
    Else
        Print "Cargando data desde archivo " & ruta_data & " directamente en vez de transporte bean."
        wtable!hex_huelladactilar = File.Load(ruta_data) ' HEXFING64 -- la huella dactilar, viene base64 codificado y debe convertirse antes de colocarse"
    Endif
    'wtable!hex_fotocara = imag_cara ' la foto por si no sirve el escanerdedo y hay que auditar la asistencia"
    wtable!fec_actualizacion = Date(Now)
    wtable!cod_usuasys = "systemas"
    wtable.Update
    Try hconn.Commit
    If Error Then
        Print " Error registrando el id: " & Error.Text & " error " & Error.Code & ""
        Message.Warning(" Error registrando el id: " & Error.Text & " " & Error.Code & "\nPor favor vuelva a intentarlo, si persiste dicho error entonces\nconsulte con el departamento de nomina, a traves de la mensageria.")
        coderro = 1
        hconn.Rollback
    Else
        coderro = 0
        dummyquer = "SELECT APELLIDOS as ape, nombres as nom from ConsolidadoTemp WHERE cedula='" & fixedcedu & "' and lower(estado) = 'activo'"
        Try hres = hconn.Exec(dummyquer)
        Print " error " & Error.Text & Error.Code & " rs " & hres.Count
        If Not IsNull(hres) Then
            If hres.Count > 0 Then
                ' Print hres.Fields & " ver " & wtable.Max
                datos[0] = hres!ape
                datos[1] = hres!nom
            Endif
        Endif
        Message.Info("Usuario/trabajador encontrado.. y enrolado.\n " & id & " : " & datos[0] & ", " & datos[1])
    Endif
    ' ahora, si la aplicacion es al mismo tiempo en un solo lugar, verificar el modo directo (sin requisito de aprovacion)
    Print "Verificando si enrolado/verificado directo esta activado... " & direct_enroll
    If direct_enroll == True Then
        dummyquer = "SELECT count(cod_ficha) as existe FROM sysasis_listado_id WHERE cod_ficha LIKE '" & id & "'"
        Try wtable = hconn.Exec(dummyquer)
        If Error <> 0 Then
            coderro = 2
        Else
            vartempo = wtable!existe   ' en el delete no hacemos try, ya que en el select aseguramos cod_ficha existe dicho campo
            If vartempo >= 1 Then
                Print "Enrolado directo activado, detectado que el usuario " & id & " existe, se actualizara su huella con esta nueva"
                hconn.Begin
                dummyquer = "DELETE FROM sysasis_listado_id WHERE cod_ficha LIKE '" & id & "%'"
                hres = hconn.Exec(dummyquer)
                Try hconn.Commit
                If Error Then
                    Print "Error manejando el registro previo del usuario... "
                    coderro = 2
                    hconn.Rollback
                Endif
            Endif
            Wait 4
            hconn.Begin
            wtable = hconn.Create("sysasis_listado_id")
            wtable!cod_ficha = id ' TIPNOM VARCHAR(60) Default Null, - - PK necesaria, dado no hay un trab en varias nominas"
            wtable!fec_registro = Date(Now) ' CODSUC VARCHAR(60) Default Null, - - brinda info del lugar de trabajo"
            wtable!cod_gerencia = codubi ' CODGER VARCHAR(60) Default Null, - - brinda info del lugar donde debe trabajar"
            If Comp(ruta_data, "", gb.IgnoreCase) == 0 Then
                wtable!hex_huelladactilar = data ' HEXFING64 -- la huella dactilar, viene base64 codificado y debe convertirse antes de colocarse"
            Else
                Print "Cargando data desde archivo " & ruta_data & " directamente en vez de transporte bean."
                wtable!hex_huelladactilar = File.Load(ruta_data) ' HEXFING64 -- la huella dactilar, viene base64 codificado y debe convertirse antes de colocarse"
            Endif
            'wtable!hex_fotocara = imag_cara ' la foto por si no sirve el escanerdedo y hay que auditar la asistencia"
            wtable!fec_actualizacion = Date(Now)
            wtable!cod_usuasys = "systemas"
            wtable.Update
            If coderro == 2 Then
                Print "Error : " & Error.Text
                hconn.Rollback
            Endif
            Try hconn.Commit
            If Error Or coderro == 2 Then
                Print " Error registrando el id: " & Error.Text & " error " & Error.Code & ""
                Message.Warning(" Error registrando el id: " & Error.Text & " " & Error.Code & "\nPor favor vuelva a intentarlo, si persiste dicho error entonces\nconsulte con el departamento de nomina, a traves de la mensageria.")
                coderro = 1
            Else
                coderro = 0
                Print "Enrolado directo activado, Datos actualizados, para el usuario " & id & " ya puede usar su huella dactilar"
            Endif
        Endif
    Endif
    Print "Usuario/trabajador enrolado, datos seran validos para verificacion apenas se aprueben en listado nuevo. " & coderro
    closeConnection
    Return coderro
    
End

'' procedimiento de verificacion de esclav.. digo de huella dactilar de usuarios/trabajadores existentes
'' requiere el id (ficha/cedula/identificador) del usuario o trabajador, 
'' retorna la data de la huella en base64 codificada, debe tomar esto y escribirla en fs en la ruta respectiva
Public Sub sys_verify_user(id As String, Optional ruta_data As String = "", Optional requested As String = "0") As Variant
    
    Dim wtable As Result        ' virtualizacion en tabal del archivo CSV antes de meter en la tabal de BD
    Dim dummyquer As String     ' query para ingresar el usuario en la lista de enrolado
    Dim hres As Result          ' abstraccion de resultados desde DB despeus de ejecutar query
    Dim codubi As String        ' codigo de la ubicacion, deberia tomarse de la aplicacion pero bueh
    Dim vartempo As Integer     ' usada para saber en cada query si vino resultado alguno
    Dim coderro As Integer = 0  ' codigo error de la operacion, cero si nada fallido, y 1 hay errores
    Dim data As Variant         ' data del dedo a retornar del usuario, se coloca en fs para engañar a la lib
    
    Dim myFinger As Stream  ' TODO probando, remover e implementar fuera del modulo DB
    Dim resultado_backend As String
    
    Dim fixcedula As String
    Dim numdigits As Integer
    Dim fixedcedu As String
    
    ' preparacion de la coneccion de base de datos
    If isConected() == False Then
        getConeccionDB()
    Endif
    
    ' el id varia en digitos o formato, para el disparador, remover A/Z y autocompletar
    fixedcedu = fixidlen(id)
    id = fixedcedu
    
    ' se esta registrando la huella de un nuevo usuario, verificamos no lo hayan enrolado antes
    dummyquer = "SELECT count(cod_ficha) as existe, hex_huelladactilar FROM sysasis_listado_id WHERE cod_ficha LIKE '" & id & "'"
    Try wtable = hconn.Exec(dummyquer)
    If Error Then
        coderro = 2
    Else
        vartempo = wtable!existe   ' en el delete no hacemos try, ya que en el select aseguramos cod_ficha existe dicho campo
        If vartempo >= 1 Then
            data = wtable["hex_huelladactilar"]
            If Exist(ruta_data) Then
                Kill ruta_data
            Endif
            If Comp(ruta_data, "", gb.IgnoreCase) == 0 Then
                Print "Guardando data por bean/write archivo " & ruta_data & " desde el blob directamente."
                'Close myFinger
            Else
                ' Print "Guardando data desde archivo " & ruta_data & " directamente en vez de transporte bean."
                ' File.Save(ruta_data, wtable["hex_huelladactilar"].Data) ' HEXFING64 -- la huella dactilar, viene base64 codificado y debe convertirse antes de colocarse"
                dummyquer = "sqlite3 " & hconndbnam & " \" SELECT quote(hex_huelladactilar) FROM sysasis_enrolar_id WHERE cod_ficha Like '" & id & "'\" | sed -e \"s/^X'//\" -e \"s/'$//\" | xxd -r -p > " & ruta_data
                Print dummyquer
                Shell dummyquer & " 2>&1" To resultado_backend
                Print resultado_backend
            Endif
            Print "Usuario/trabajador encontrado.. para validar... " & coderro
        Else
            Print "usuario no existe, necesita ser enrolado primero o fue eliminado en una actualizacion de nomina.."
            data = Null
        Endif
    Endif
    
    If coderro == 2 Then
        Print " Error verificando el id: " & Error.Text & " " & Error.Code & " consulte con el departamento de nomina, y en ultimo sistemas."
        Message.Warning(" Error verificando el id: " & Error.Text & " " & Error.Code & "\nPor favor vuelva a intentarlo, si persiste dicho error entonces\nconsulte con el departamento de nomina, a traves de la mensageria.")
        Return Null
    Else
        
    Endif
    
    ' TODO si modo directo activo ya podria verificarse, pero sino entonces logear que necesita aprobacion
    closeConnection
    Return data
    
End

'' retorna la data del usuario segun el id dado.. retorna un arreglo de strings con la info
Public Sub sys_search_user(id As String, Optional forcenomina As Integer = 0) As String[]
    
    Dim wtable As Result        ' virtualizacion en tabal del archivo CSV antes de meter en la tabal de BD
    Dim dummyquer As String     ' query para ingresar el usuario en la lista de enrolado
    Dim hres As Result          ' abstraccion de resultados desde DB despeus de ejecutar query
    Dim codubi As String        ' codigo de la ubicacion, deberia tomarse de la aplicacion pero bueh
    Dim vartempo As Integer     ' usada para saber en cada query si vino resultado alguno
    Dim coderro As Integer = 0  ' codigo error de la operacion, cero si nada fallido, y 1 hay errores
    Dim datos As New String[3]   ' data del usuario para mostrar informativo en pantalla, asi no mete la pata el esclav.. err trabajador
    
    Dim fixcedula As String
    Dim numdigits As Integer
    Dim fixedcedu As String
    
    ' preparacion de la coneccion de base de datos
    If isConected() == False Then
        getConeccionDB()
    Endif
    
    ' el id varia en digitos o formato, para el disparador, remover A/Z y autocompletar
    fixedcedu = fixidlen(id)
    id = fixedcedu
    
    dummyquer = "SELECT count(cod_ficha) as existe FROM sysasis_listado_id WHERE cod_ficha LIKE '" & id & "'"
    Print dummyquer
    Try wtable = hconn.Exec(dummyquer)
    If Error Then
        coderro = 2
    Else
        If Not IsNull(wtable) Then
            Print wtable["existe"] & " primer verif " & wtable.Count
            datos[0] = ""
            datos[1] = "Invitado"
            datos[2] = "998"
            If Val(wtable!existe) >= 1 And wtable.Count > 0 Then
                dummyquer = "SELECT count(*) as existe from ConsolidadoTemp WHERE ficha like '" & id & "'"
                hres = Null
                hres = hconn.Exec(dummyquer)
                If Not IsNull(hres) And Val(hres!existe) >= 1 Then
                    dummyquer = "SELECT APELLIDOS as ape, nombres as nom, codger as cub from ConsolidadoTemp WHERE ficha like '" & id & "'"
                    hres = Null
                    hres = hconn.Exec(dummyquer)
                    If Not IsNull(hres) And hres.Count > 0 Then
                        ' Print hres.Fields & " ver " & wtable.Max
                        Print "Usuario/trabajador encontrado.. para validar... " & coderro & " " & hres!ape & " " & hres!nom & " " & hres!cub
                        datos[0] = hres!ape
                        datos[1] = hres!nom
                        datos[2] = hres!cub
                    Else
                        Print "Existe con huella, pero no esta o fue eliminado de nomina.."
                    Endif
                Else
                    datos[0] = "En nomina"
                    datos[1] = "no esta aun"
                    Print "Existe con huella, pero no esta o fue eliminado de nomina.."
                Endif
            Else
                Print "usuario no existe, necesita ser enrolado primero o fue eliminado en una actualizacion de nomina.."
            Endif
        Endif
    Endif
    
    If coderro == 2 Then
        Print " Error verificando el id: " & Error.Text & " " & Error.Code & " consulte con el departamento de nomina, y en ultimo sistemas."
        Message.Warning(" Error verificando el id: " & Error.Text & " " & Error.Code & "\nPor favor vuelva a intentarlo, si persiste dicho error entonces\nconsulte con el departamento de nomina, a traves de la mensageria.")
        Return Null
    Else
        
    Endif
    
    ' TODO si modo directo activo ya podria verificarse, pero sino entonces logear que necesita aprobacion
    Print "Usuario/trabajador encontrado.. para validar... " & coderro
    closeConnection
    Return datos
    
End

Public Sub sys_writehistory_user(id As String, cubi As String, hora As Integer, minu As Integer, Optional ruta_foto As String = "", ruta_data As String = "", data As Variant) As Integer
    
    ' - - tabla de registros del horario de trabajo, es usada para enviar a OP y registrar los horarios laborados
    '   cod_ficha VARCHAR(20) Not Null, - - ficha / cedula / id del trabajador NOTA ESTE NO ES CI, en VNZ es CI
    '   cod_cedula VARCHAR(20) Not Null, - - cedula con nacionalidad y guin del trabajador, solo VNZ
    '   fec_registro Date Not Null, - - fecha del registro de dia a laborar
    '   cod_gerencia VARCHAR(20) Not Null, - - ubicacion(tienda)a la que pertenece
    '   num_contador INTEGER Not Null Default 0, - - contador de fotos, si va a distintos lugares debe marcar salida
    '   horaentrada INTEGER Null, - - hora de entrada del dia
    '   minuentrada INTEGER Null, - - minuto de entrada en dicha hora
    '   horadescanso INTEGER Null, - - hora de descanso del dia
    '   minudescanso INTEGER Null, - - minuto de descanso en dicha respectiva hora
    '   horareincor INTEGER Null, - - hora que se reincorpora del descanso
    '   minureincor INTEGER Null, - - minuto de reincorporacion de dicha hora
    '   horasalida INTEGER Null, - - hora de salida del dia laborado
    '   minusalida INTEGER Null, - - minuto de salida de dich hora
    '   hex_huelladactilar BLOB Not Null, - - opcional, huella dactilar del usuario/trabajado ficha, opcional, es HEXFING
    '   hex_fotocara BLOB Not Null, - - opcional, foto de la cara es OPCIONAL y no necesario
    '   fec_actualizacion Date Null, - - fecha en que se altero los datos de esta tabla por ultima vez NOTA FUNCIONA CON DEFAULT NOW
    '   cod_usuasys VARCHAR(20)Null, - - codigo / usuario que altero los datos por ultima vez
    '   - - si el personal es muy movido, tendra registros en distintas ubicaciones,
    '   - - el ubicacion ayuda a descartar duplicados.esto amerita tener un SP que maneje los datos
    '   - - la expotacio se realizara en un vista que colocara el calculo de las horas y
    '   - - estos registros "dispersos"(ejemplo, entro en castellana, su primera salida debe ser de castellana antes de ir a otro lado)
    '   - - diferencia entre registro no puede ser menor a 1 / 3 hora y mayor a 6 horas CUANDO SEAN SELLOS DISTINTOS
    ' Poruqe dos columnas de fecha? : porque la segunda es por defecto la fecha y hora actual, si alguien manipula, se registra
    ' lo que significa que si alguien inserta alguna hora de trabajo a mano, se vera la trampa si no ejecuta completo el query
    
    Dim wtable As Result        ' virtualizacion en tabal del archivo CSV antes de meter en la tabal de BD
    Dim dummyquer As String     ' query para manejar el usuario en los registros
    Dim hres As Result          ' abstraccion de resultados desde DB despeus de ejecutar query
    Dim codubi As String        ' codigo de la ubicacion, deberia tomarse de la aplicacion pero bueh
    Dim entradas As Integer     ' veces que tiene registros de horarion en la tabla...
    Dim vartempo As Integer     ' usada para saber en cada query si vino resultado alguno
    Dim coderro As Integer = -1  ' codigo error de la operacion, cero si nada falla, y 1 hay errores
    Dim datos As New String[2]   ' data del usuario para mostrar informativo en pantalla, asi no mete la pata el esclav.. err trabajador
    
    Dim fixcedula As String
    Dim numdigits As Integer
    Dim fixedcedu As String
    
    ' el id varia en digitos o formato, para el disparador, remover A/Z y autocompletar
    fixedcedu = fixidlen(id)
    id = fixedcedu
    
    codubi = "998"
    ' //////////// INICIO CODIGO TOMADO DE LEONARDO SALAZAR; EL MANTENDRA DICHO CODIGO //////////////////////
    datos = sys_search_user(id)     'primero se valida la cedula en la tabla de empleados para asegurarno de que esta activo y trabaja
    If Comp(Trim(datos[0]), "", gb.IgnoreCase) == 0 Then 
        entradas = -2     ' si no esta activo no traera nada y no se le creara un registro...
    Else
        codubi = datos[2]
    Endif
    ' preparacion de la coneccion de base de datos
    If isConected() == False Then
        getConeccionDB()
    Endif
    ' resultado = con.Exec("select \"Ficha\" from empleados_activos where \"Ficha\"='" & CStr(TextBox1.Text) & "' and \"Estado\"='Activo'") 
    dummyquer = "select cod_ficha, " 
    dummyquer = dummyquer & " horaentrada, minuentrada, "
    dummyquer = dummyquer & " horadescanso, minudescanso, "
    dummyquer = dummyquer & " horareincor, minureincor, "
    dummyquer = dummyquer & " horasalida, minusalida "
    dummyquer = dummyquer & " from sysasis_registro "
    dummyquer = dummyquer & " where cod_ficha = '" & id & "' and cod_gerencia = '" & codubi & "' "
    ' estos querys son ambiguos, dado el usuario si tiene distintos codigos de ubicacion tendra distintos registros, asi que habra que unificarlos o usar codigos de ubicacion distintos
    Print dummyquer
    hres = hconn.Exec(dummyquer) ' resultado = con.Exec("select \"Ficha\" from empleados_activos where \"Ficha\"='" & CStr(TextBox1.Text) & "' and \"Estado\"='Activo'")
    entradas = 5
    Print " registo : " & id & " " & codubi & " " & hora & ":" & minu & ""
    If Not IsNull(hres) Then
        If hres.Count > 0 Then
            Print "Horas: he: " & hres!horaentrada & " hd: " & hres!horadescanso & " hr: " & hres!horareincor & " hs: " & hres!horasalida
            If hres!horaentrada <> 0 And hres!horadescanso == 0 And hres!horareincor == 0 And hres!horasalida == 0 Then ' nadie entra a las 12 de la noche en esta empresa
                entradas = 2
            Endif
            If hres!horaentrada <> 0 And hres!horadescanso <> 0 And hres!horareincor == 0 And hres!horasalida == 0 Then
                entradas = 3
            Endif
            If hres!horaentrada <> 0 And hres!horadescanso <> 0 And hres!horareincor <> 0 And hres!horasalida == 0 Then
                entradas = 4
            Endif
        Else
            entradas = 1
        Endif
    Else
        entradas = 1
    Endif
    ' se registra la hora del usuario con el dedo, laimagen es opcional, peropor ahora se le pide siempre
    hconn.Begin
    Select Case entradas
        Case 1
            wtable = hconn.Create("sysasis_registro")
            wtable!cod_ficha = id
            wtable!fec_registro = Format$(Now, "yyyy-mm-dd hh:00:00.000") ' "2013-07-16 14:11:21.722"
            wtable!cod_gerencia = codubi
            wtable!num_contador = entradas
            wtable!horaentrada = hora
            wtable!minuentrada = minu
            If Comp(ruta_data, "", gb.IgnoreCase) <> 0 Then
                Print "Cargando data desde archivo " & ruta_data & " directamente en vez de transporte bean."
                If Exist(ruta_data) Then
                    wtable!hex_huelladactilar = File.Load(ruta_data) ' HEXFING64 -- la huella dactilar, viene base64 codificado y debe convertirse antes de colocarse"
                Else
                    wtable!hex_huelladactilar = Null
                Endif
            Endif
            If Comp(ruta_foto, "", gb.IgnoreCase) <> 0 Then
                Print "Cargando data desde archivo " & ruta_foto & " directamente en vez de transporte bean."
                If Exist(ruta_foto) Then
                    wtable!hex_fotocara = File.Load(ruta_foto) ' HEXFING64 -- opcional, foto de la cara es OPCIONAL y no necesario
                Else
                    wtable!hex_fotocara = Null
                Endif
            Endif
            wtable!fec_actualizacion = Date(Now)
            wtable!cod_usuasys = "systemas"
            wtable.Update
        Case 2
            wtable = hconn.Edit("sysasis_registro", "cod_ficha = &1 and cod_gerencia = &2 ", id, codubi)
            wtable!cod_ficha = id ' TIPNOM VARCHAR(60) Default Null, - - PK necesaria, dado no hay un trab en varias nominas"
            wtable!fec_registro = Format$(Now, "yyyy-mm-dd hh:00:00.000") ' "2013-07-16 14:11:21.722"
            wtable!cod_gerencia = codubi ' CODGER VARCHAR(60) Default Null, - - brinda info del lugar donde debe trabajar"
            wtable!num_contador = entradas
            wtable!horadescanso = hora
            wtable!minudescanso = minu
            If Comp(ruta_data, "", gb.IgnoreCase) <> 0 Then
                Print "Cargando data desde archivo " & ruta_data & " directamente en vez de transporte bean."
                If Exist(ruta_data) Then
                    wtable!hex_huelladactilar = File.Load(ruta_data) ' HEXFING64 -- la huella dactilar, viene base64 codificado y debe convertirse antes de colocarse"
                Else
                    wtable!hex_huelladactilar = Null
                Endif
            Endif
            If Comp(ruta_foto, "", gb.IgnoreCase) <> 0 Then
                Print "Cargando data desde archivo " & ruta_foto & " directamente en vez de transporte bean."
                If Exist(ruta_foto) Then
                    wtable!hex_fotocara = File.Load(ruta_foto) ' HEXFING64 -- opcional, foto de la cara es OPCIONAL y no necesario
                Else
                    wtable!hex_fotocara = Null
                Endif
            Endif
            wtable!fec_actualizacion = Date(Now)
            wtable!cod_usuasys = "systemas"
            wtable.Update
        Case 3
            wtable = hconn.Edit("sysasis_registro", "cod_ficha = &1 and cod_gerencia = &2 ", id, codubi)
            wtable!cod_ficha = id ' TIPNOM VARCHAR(60) Default Null, - - PK necesaria, dado no hay un trab en varias nominas"
            wtable!fec_registro = Format$(Now, "yyyy-mm-dd hh:00:00.000") ' "2013-07-16 14:11:21.722"
            wtable!cod_gerencia = codubi ' CODGER VARCHAR(60) Default Null, - - brinda info del lugar donde debe trabajar"
            wtable!num_contador = entradas
            wtable!horareincor = hora
            wtable!minureincor = minu
            If Comp(ruta_data, "", gb.IgnoreCase) <> 0 Then
                Print "Cargando data desde archivo " & ruta_data & " directamente en vez de transporte bean."
                If Exist(ruta_data) Then
                    wtable!hex_huelladactilar = File.Load(ruta_data) ' HEXFING64 -- la huella dactilar, viene base64 codificado y debe convertirse antes de colocarse"
                Else
                    wtable!hex_huelladactilar = Null
                Endif
            Endif
            If Comp(ruta_foto, "", gb.IgnoreCase) <> 0 Then
                Print "Cargando data desde archivo " & ruta_foto & " directamente en vez de transporte bean."
                If Exist(ruta_foto) Then
                    wtable!hex_fotocara = File.Load(ruta_foto) ' HEXFING64 -- opcional, foto de la cara es OPCIONAL y no necesario
                Else
                    wtable!hex_fotocara = Null
                Endif
            Endif
            wtable!fec_actualizacion = Date(Now)
            wtable!cod_usuasys = "systemas"
            wtable.Update
        Case 4
            wtable = hconn.Edit("sysasis_registro", "cod_ficha = &1 and cod_gerencia = &2 ", id, codubi)
            wtable!cod_ficha = id ' TIPNOM VARCHAR(60) Default Null, - - PK necesaria, dado no hay un trab en varias nominas"
            wtable!fec_registro = Format$(Now, "yyyy-mm-dd hh:00:00.000") ' "2013-07-16 14:11:21.722"
            wtable!cod_gerencia = codubi ' CODGER VARCHAR(60) Default Null, - - brinda info del lugar donde debe trabajar"
            wtable!num_contador = entradas
            wtable!horasalida = hora
            wtable!minusalida = minu
            If Comp(ruta_data, "", gb.IgnoreCase) <> 0 Then
                Print "Cargando data desde archivo " & ruta_data & " directamente en vez de transporte bean."
                If Exist(ruta_data) Then
                    wtable!hex_huelladactilar = File.Load(ruta_data) ' HEXFING64 -- la huella dactilar, viene base64 codificado y debe convertirse antes de colocarse"
                Else
                    wtable!hex_huelladactilar = Null
                Endif
            Endif
            If Comp(ruta_foto, "", gb.IgnoreCase) <> 0 Then
                Print "Cargando data desde archivo " & ruta_foto & " directamente en vez de transporte bean."
                If Exist(ruta_foto) Then
                    wtable!hex_fotocara = File.Load(ruta_foto) ' HEXFING64 -- opcional, foto de la cara es OPCIONAL y no necesario
                Else
                    wtable!hex_fotocara = Null
                Endif
            Endif
            wtable!fec_actualizacion = Date(Now)
            wtable!cod_usuasys = "systemas"
            wtable.Update
        Case Else
            Print "Ya ud marco su salida de la localidad que colocamos"
    End Select
    Try hconn.Commit
    ' //////////// FIN DE CODIGO TOMADO DE LEONARDO SALAZAR; EL MANTENDRA DICHO CODIGO //////////////////////
    If Error Then
        Print " Error registrando el id: " & Error.Text & " error " & Error.Code & ""
        Message.Warning(" Error registrando el id: " & Error.Text & " " & Error.Code & "\nPor favor vuelva a intentarlo, si persiste dicho error entonces\nconsulte con el departamento de nomina, a traves de la mensageria.")
        entradas = -1
    Endif
    Print "Usuario/trabajador registrado, y confirmado su " & entradas & " al trabajo. " & coderro
    closeConnection
    Return entradas
    
End

                    
'' empleada para verificar el correcto seguimiento de inicio de la gestin de datos, con true, cada proceso extra no fallaria
'' verificador de coneccion activa, getconnection establece True y crea una nueva si es necesario
Public Sub isConected() As Boolean
    Return hconniscon ' getconection establece esto a true si hay una coneccion activa
End

